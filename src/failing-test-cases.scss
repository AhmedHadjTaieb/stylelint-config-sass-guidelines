// Bang Format test
.bangformat {
  color: #000!important; // Bang format test
  background-color: #000! important; // Bang format test
}

// Havn't found a way to test this with stylelint
// BEM Depth test
// scss-lint:disable SelectorFormat
// stylelint-disable selector-class-pattern
.block__element__subelement {
  color: #f00;
}
// stylelint-enable selector-class-pattern
// scss-lint:enable SelectorFormat

// Border Zero test
.borderzero {
  border: none;
}

// Color Keyword test
.colorkeyword {
  color: green;
}

// Debug statement test
$color-blue: #1c94c6;

.debug {
  @debug $color-blue;
}

// scss features not lintable for declaration order in stylelint
// DeclarationOrder test
.declarationorder {
  p {
    color: #f00;
  }

  color: #f00;
  @include message-box();
  @extend %error;
}

// stylelint does not seem to be checking this
// ElsePlacement test
$width: auto;

.elseplacement {
  @if $width == 'auto' {
    color: #f00;
  }
  @else {
    display: inline-block;
    width: $width;
  }
}

// EmptyLineBetweenBlocks test
p {
  margin: 0;
  em {
    color: #f00;
  }
}
a {
  color: #f00;
}

// EmptyRule test
.cat {
}

// Hexlength test
.hexlength {
  color: #ff22ee;
}

// HexNotation test
.hexnotation {
  color: #F00;
}

// HexValidation test
.hexvalidation {
  background: #ab; // Clearly a typo
}

// ID Selector test
#id-selector {
  color: #f00;
}

// Import Path test
@import 'foo/_bar.scss';
@import '_bar.scss';
@import '_bar';
@import 'bar.scss'; // stylelint-scss does not seem to be checking this

// Indentation test
.indentation {
    color: #f00;
}
// No test for allow_non_nested_indentation

// Leading Zero test
.leadingzero {
  margin: .5em;
}


// NameFormat test
// Functions, mixins, variables, and placeholders should be declared with all lowercase letters and hyphens instead of underscores.
@function calculationFunction($some-number, $another-number) {
  @return $some-number + $another-number;
}

@mixin myMixin() {
  color: #fff;
}

// stylelint-scss rule for this seems to be broken
$myVar: 10px;

%placeHolder {
  color: #f00;
}

// Nesting Depth test
.one {
  .two {
    .three {
      .four {
        color: #f00;
      }
    }
  }
}

// Placeholder In Extend test
.fatal {
  @extend .error;
}

// stylelint does not seem to be checking this
// Private Naming Convention test
// Enforces that functions, mixins, and variables that follow the private naming convention (default to underscore-prefixed, e.g. $_foo) are defined and used within the same file.

$_foo: #f00;

figcaption {
  color: #00f;
}

// stylelint does not seem to be checking this
// PropertySpelling test
.propertyspelling {
  diplay: none; // "display" is spelled incorrectly
}

// PseudoElement test
p:before {
  content: '>';
}

p::hover {
  color: #f00;
}

// QualifyingElement test
// scss-lint:disable IdSelector
div#thing {
  color: #f00;
}
// scss-lint:enable IdSelector

ul.list {
  color: #f00;
}

ul li.item {
  color: #f00;
}

a[href='place'] {
  color: #f00;
}

// SelectorDepth test
.one .two .three > .four {
  color: #f00;
}

.one .two {
  .three > .four {
    color: #f00;
  }
}

// Selector Format test
.SELECTOR__FORMAT {
  color: #f00;
}

// Shorthand test
.shorthand {
  margin: 1px 1px 1px 1px;
}

// SingleLinePerProperty test
.singlelineproperty1 {
  margin: 0; padding: 0;
}

.singlelineproperty1 { margin: 0; padding: 0; }

// SingleLinePerSelector test
.error, .explanation {
  color: #f00;
}

// Stylelint doesn't seem to catch comma space in @include line
// SpaceAfterComma test
.spaceaftercomma {
  @include box-shadow(0 2px 2px rgba(0,0,0,0.2));
  color: rgba(0,0,0,0.1);
}

// SpaceAfterPropertyColon test
.spaceafterpropertycolon {
  margin:0; // No space
  padding:  0; // Too many spaces
}

// SpaceAfterPropertyName test
.spaceafterpropertyname {
  margin : 0;
}

// stylelint does not seem to be checking this
// SpaceAfterVariableColon test
$spaceaftervariblecolon:#fff; // No space

// stylelint does not seem to be checking this
// SpaceAfterVariableName test
$spaceaftervariblename : #f00;

// SpaceAroundOperator test
.spacearoundoperator {
  margin: calc(5px+5px); // No Space
  padding: calc(5px   +   5px); // Too much space
}

// SpaceBeforeBrace test
.spacebeforebrace1{
  color: #f00;
}

.spacebeforebrace2  {
  color: #f00;
}

// stylelint does not seem to support this?
// allow_single_line_padding test
.icon-chevronup    { &::before { content: '\e030'; } }
.icon-chevrondown  { &::before { content: '\e031'; } }
.icon-chevronleft  { &::before { content: '\e032'; } }

// Stylelint doesn't seem to catch parens space in @include line
// SpaceBetweenParens test
.spacebetweenparens {
  @include box-shadow( 0 2px 2px rgba( 0, 0, 0, 0.2 ) );
  color: rgba( 0, 0, 0, 0.1 );
}

// StringQuotes test
.stringquotes {
  content: "hello";
}

// TrailingSemicolon test
.trailingsemicolon {
  background-color: #fff ;
  color: #fff
}

// TrailingZero test
.trailingzero {
  margin: 0.500em;
}

// stylelint does not seem to support this?
// UnnecessaryMantissa test
.mantissa {
  margin: 1.0em;
}

// UnnecessaryParentReference test
.parentreference {
  & > .bar {
    color: #f00;
  }
}

// UrlQuotes test
.quotes-url {
  background: url(example.png);
}

// Vendor Prefixes test
// stylelint does not seem to catch this
@-webkit-keyframes anim {
  0% {
    opacity: 0;
  }
}

// stylelint does not seem to catch this
::-moz-placeholder {
  color: #f00;
}

.foo {
  -webkit-transition: none;
}

// stylelint does not seem to catch this
.bar {
  position: -moz-sticky;
}

// Zero Unit test
.zerounit {
  margin: 0px;
}
